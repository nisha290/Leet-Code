QUESTION

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 3 * 104
-105 <= nums[i] <= 105
 

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.


SOLUTION

class Solution 
{
    public int maxSubArray(int[] nums) 
    {
        int size=nums.length;
       int max = Integer.MIN_VALUE,
        max_end = 0,start = 0,
        end = 0, s = 0;
 
        for (int i = 0; i < size; i++)
        {
            max_end  += nums[i];
 
            if (max <max_end )
            {
                max = max_end ;
                start = s;
                end = i;
            }
 
            if (max_end  < 0)
            {
                max_end  = 0;
                s = i + 1;
            }
        }
        return max;
    }
}

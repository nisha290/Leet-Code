QUESTION

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
Example 3:

Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000
Example 4:

Input: nums1 = [], nums2 = [1]
Output: 1.00000
Example 5:

Input: nums1 = [2], nums2 = []
Output: 2.00000
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106


SOLUTION

class Solution 
{
    public double findMedianSortedArrays(int[] nums1, int[] nums2)
    {
        int m=nums1.length;
        int n=nums2.length;
        int p=m+n;
        int[] nums3=new int[p];
        int count=0;
        for(int i=0;i<m;i++)
        {
            nums3[count]=nums1[i];
            count++;
        }
        for(int j=0;j<n;j++)
        {
            nums3[count]=nums2[j];
            count++;
        }
        Arrays.sort(nums3);
        int x=0;
        double output=0.0;
        if(p % 2 == 0)
        {
            x=p/2;
            int sum=nums3[x] + nums3[x-1];
            output=sum/2.0;
        }
        else
        {
            x=p/2;
            output=nums3[x];
        }
        return output;
    }
}

QUESTION

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-231 <= nums[i] <= 231 - 1


SOLUTION

class Solution 
{
    public int majorityElement(int[] nums)
    {
        int len=nums.length;
        int count=0,n=0;
        for(int i=0;i<len;i++)
        {
            count = 0;
            for(int j=0;j<len;j++)
            {
                if(nums[i] == nums[j])
                    count++;
            }
            if(count > len/2)
            {
                n = nums[i];
                break;
            }
        }
        return n;
    }
}
